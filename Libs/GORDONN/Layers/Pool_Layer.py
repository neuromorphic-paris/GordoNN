#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 23 09:03:43 2022

@author: marcorax93
"""

import copy
from joblib import Parallel, delayed 


class Pool_Layer:
    """
    Local Layer for GORDONN architecture, used to subsample channels of the 
    dataset to allow for better generalization over pitch shifts in user.
    It works by taking channel indexes and floor dividing it //sub_factor.
    Please note that if channel number is not dividable by sub_factor, the last
    channel will pool less indeces that other pool channels.
    
    Local Layer constructor arguments: 
        
    n_input_channels (int): the total number of channels of the previous layer.   
        
    n_input_features (int): the total number of features of the previous layer.  
                           
    pool_factor (int) : how many channels will now be considered a single channel,
                       if 2, a 32 channel input will now be considered a 16 channel
                       one.
                       
    n_threads (int) : The network can compute the recordings in parallel, 
                      this arguments defines the number of simultaneous threads
 
    verbose (boolean) : If True, the layer will output messages to inform the 
                          the users about the current states as well as plots.
    """
    def __init__(self, n_input_channels, n_input_features, pool_factor, 
                 n_threads=8, verbose=False):
        
        self.n_input_channels = n_input_channels
        self.n_input_features = n_input_features
        self.pool_factor = pool_factor
        self.n_threads = n_threads
        self.verbose = verbose
        

  
    #Empty method to allow compatibility with Gordonn Network 
    def learn(self, layer_dataset, labels):
        """
        Method to pool channel info from a dataset
        
        Arguments: 
             layer_dataset: list of individual event based recoriding as
                            generated by the cochlea
             labels: list of labels index of each recording of layer_dataset
        """    
        
        # Output arguments for next layers
        self.n_output_features = self.n_input_features
        self.n_output_channels = int(self.n_input_channels//self.pool_factor)
        return
        
    #Wrapper of pool method to allow compatibility with Gordonn Network 
    def predict(self, layer_dataset, labels):
        """
        Method to pool channel info from a dataset
        
        Arguments: 
             layer_dataset: list of individual event based recoriding as
                            generated by the cochlea
             labels: list of labels index of each recording of layer_dataset
             
        Returns: 
            pool_response: list of individual event based recording where 
                           the channel information is now spatially pooled 
                           by the pool_factor
        """    
        
        pool_response=self.pool(layer_dataset)
        
        return pool_response


    def pool(self, layer_dataset):
        """
        Method to pool channel info from a dataset
        
        Arguments: 
             layer_dataset: list of individual event based recoriding as
                            generated by the cochlea
        Returns: 
            pool_response: list of individual event based recording where 
                           the channel information is now spatially pooled 
                           by the pool_factor
        """
        
        pool_response = copy.deepcopy(layer_dataset)
        p_f = self.pool_factor
        
        if self.verbose:
            par_verbose = 0
        else:
            par_verbose = 0
        
            
        pool_response = Parallel(n_jobs=self.n_threads, verbose=par_verbose)\
                            (delayed(channel_pooling)\
                            (layer_dataset[recording], p_f)
                          for recording in range(len(layer_dataset)))
            
        return pool_response
    
    #Importing Classifiers Methods
    from Libs.GORDONN.Classifiers.Histogram_Classifiers import gen_histograms
    from Libs.GORDONN.Classifiers.Histogram_Classifiers import gen_signatures


        
def channel_pooling(rec_data, pool_factor):
    """
    Internal Function used to pool channel information of a single recording
    """
    if len(rec_data[1]):
        rec_data[1] =  rec_data[1]//pool_factor
    
    return rec_data
    
    